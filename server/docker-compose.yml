version: '3.8'

# Smart Greenhouse IoT System - Docker Compose Configuration
# - PostgreSQL with TimescaleDB for unified database architecture
# - Redis for caching and session management  
# - FastAPI backend with authentication
# - Grafana for monitoring dashboards

networks:
  greenhouse_network:
    driver: bridge

volumes:
  # PostgreSQL data persistence
  postgres_data:
  # Redis data persistence
  redis_data:
  # Grafana data persistence
  grafana_data:

services:
  # PostgreSQL with TimescaleDB - Primary Database & Time-Series Engine
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: greenhouse_postgres
    restart: unless-stopped
    ports:
      - "5432:5432"  # Expose PostgreSQL port
    environment:
      # PostgreSQL configuration
      POSTGRES_DB: greenhouse
      POSTGRES_USER: greenhouse_user
      POSTGRES_PASSWORD: greenhouse_pass
      POSTGRES_HOST_AUTH_METHOD: trust
      # TimescaleDB configuration
      TIMESCALEDB_TELEMETRY: off
      # Create additional databases for services
      POSTGRES_MULTIPLE_DATABASES: greenhouse,grafana
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/sql:/opt/sql
    networks:
      - greenhouse_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U greenhouse_user -d greenhouse"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - High-Performance Cache Layer
  redis:
    image: redis:7-alpine
    container_name: greenhouse_redis
    restart: unless-stopped
    ports:
      - "6379:6379"  # Expose Redis port
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - greenhouse_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend - Application Layer
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: greenhouse_api
    restart: unless-stopped
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    ports:
      - "8000:8000"  # Expose FastAPI port
      - "5683:5683/udp"  # Expose CoAP port
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database connections
      POSTGRES_HOST: postgres
      POSTGRES_DB: greenhouse
      POSTGRES_USER: greenhouse_user
      POSTGRES_PASSWORD: greenhouse_pass
      POSTGRES_PORT: 5432
      
      # TimescaleDB configuration
      TIMESCALEDB_ENABLED: true
      TIMESCALE_CHUNK_TIME_INTERVAL: 1d
      TIMESCALE_COMPRESSION_ENABLED: true
      TIMESCALE_RETENTION_POLICY: 1y
      
      # Redis configuration
      REDIS_URL: redis://redis:6379/0
      
      # API configuration
      API_HOST: 0.0.0.0
      API_PORT: 8000
      FLASK_ENV: production
      
      # Security configuration
      JWT_SECRET_KEY: your-super-secure-jwt-secret-key-change-in-production
      API_KEY_CACHE_TTL: 300
      SESSION_TTL: 86400
      
      # Rate limiting
      RATE_LIMIT_ENABLED: true
      DEFAULT_RATE_LIMIT: 120
      
      # Logging
      LOG_LEVEL: INFO
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    networks:
      - greenhouse_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Monitoring & Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: greenhouse_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"  # Expose Grafana port
    depends_on:
      postgres:
        condition: service_healthy
      api:
        condition: service_healthy
    environment:
      # Grafana configuration
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource,grafana-polystat-panel
      GF_RENDERING_SERVER_URL: http://renderer:8081/render
      GF_RENDERING_CALLBACK_URL: http://grafana:3000/
      GF_LOG_FILTERS: rendering:debug
      
      # Database configuration for Grafana
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: postgres:5432
      GF_DATABASE_NAME: grafana
      GF_DATABASE_USER: greenhouse_user
      GF_DATABASE_PASSWORD: greenhouse_pass
      GF_DATABASE_SSL_MODE: disable
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/plugins:/var/lib/grafana/plugins
    networks:
      - greenhouse_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Migration & Seeding Service
  db_migrator:
    build:
      context: ./database
      dockerfile: Dockerfile.migrator
    container_name: greenhouse_db_migrator
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: greenhouse
      POSTGRES_USER: greenhouse_user
      POSTGRES_PASSWORD: greenhouse_pass
      POSTGRES_PORT: 5432
      TIMESCALEDB_ENABLED: true
    volumes:
      - ./database:/opt/database
      - ./logs:/opt/logs
    networks:
      - greenhouse_network
    restart: "no"  # Run once for migration and seeding

  # Redis Commander - Redis Management UI (Development only)
  redis_commander:
    image: rediscommander/redis-commander:latest
    container_name: greenhouse_redis_commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - greenhouse_network
    profiles:
      - development

  # pgAdmin - PostgreSQL Management UI (Development only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: greenhouse_pgadmin
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@greenhouse.local
      PGADMIN_DEFAULT_PASSWORD: admin123
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - greenhouse_network
    profiles:
      - development
